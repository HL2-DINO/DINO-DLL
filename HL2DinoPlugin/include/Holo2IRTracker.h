/** @file		Holo2IRTracker.h
 *  @brief		Function prototypes for the HoloLens2 IR Tracker class

 *  @author		Hisham Iqbal
 *  @copyright	&copy; 2023 Hisham Iqbal
 */

#ifndef HOLO2_IR_TRACKER_H
#define HOLO2_IR_TRACKER_H

#include "Eigen/Dense"
#include <vector>
#include <map>
#include <opencv2/core.hpp>   
#include <functional>
#include "IRTrackerUtils.h"

class Holo2IRTracker
{
	public:
		//-------------------------------------------------------------------------------------------------------------
		//! Default constructor which will initialize cached variables/images.
		Holo2IRTracker();

		//! Additional constructor to set up the internal tool dictionary based on an encoded string.
		//!
		//! \param encodedString   String which is either specially formatted with semi-colons 
		//!                        and commas or follows the JSON configuration.
		//! \param isJSONString    Confirm/deny on user side if string is JSON-formatted.
		Holo2IRTracker(const std::string& encodedString, bool isJSONString = false);
		//-------------------------------------------------------------------------------------------------------------

		//-------------------------------------------------------------------------------------------------------------
		//! Key function of this class, which updates our internal tool dictionary when IR marker-equipped tools are 
		//! visible to the headset.
		//!
		//! \param ABImg			Pointer to Active-Brightness or IR-response buffer, expecting raw image as it comes 
		//!							out of the ResearchModeAPI without modification.
		//! \param DepthImg			Pointer to Depth Image buffer, as it comes out of ResearchModeAPI without 
		//!							modification.
		//! \param depth2world		Transform matrix from depth coordinates to holographic world frame.
		void ProcessLatestFrames(
			const uint16_t*						ABImg,
			const uint16_t*						DepthImg,
			const Eigen::Ref<Eigen::Matrix4d>	depth2world);

		//! Key function of this class, which updates our internal tool dictionary when IR marker-equipped tools are 
		//! visible to the headset.
		//!
		//! \param ABImg				Pointer to Active-Brightness or IR-response buffer, expecting raw
		//!								image as it comes out of the ResearchModeAPI without modification.
		//! \param DepthImg				Pointer to Depth Image buffer, as it comes out of ResearchModeAPI
		//!								without modification.
		//! \param depth2world			Transform matrix from depth coordinates to holographic world frame.
		//! \param UpdateDisplayImgs	If true, we will do some extra steps to visualize the processed sensor data.
		//!								If false, run leaner and avoid making image copies.
		void ProcessLatestFrames(
			const uint16_t*						ABImg,
			const uint16_t*						DepthImg,
			const Eigen::Ref<Eigen::Matrix4d>	depth2world,
			const bool&							UpdateDisplayImgs);
		//-------------------------------------------------------------------------------------------------------------

		//-------------------------------------------------------------------------------------------------------------
		//! Used to store an internal reference to the AHAT camera's MapImagePointToUnitPlane function.
		//!
		//! \param unmapFunction Properly initialized std::function pointer mimicking the function signature of 
		//! MapImageToUnitPlane.
		void SetUnmapFunction(IRTrackerUtils::UnmapFunction& unmapFunction);
		//-------------------------------------------------------------------------------------------------------------
		
		//-------------------------------------------------------------------------------------------------------------
		//! Returns the current count of the internal tool dictionary structure.
		//! \return
		int TrackedToolsCount();
		//-------------------------------------------------------------------------------------------------------------
		
		//-------------------------------------------------------------------------------------------------------------
		//! Populates the passed double vector as generated by IRTrackerUtils.
		//!
		//! In V1.0 structure is as follows:
		//! [toolID, toolVisible(0/1), m00, m10, m20, ..., m33] repeats N times.
		//! Vector is of length 18 * N (N = number of tools).
		//!
		//! \param out_encodedDoubleArray Double array containing encoded info about tools.
		void GetSerializedToolDict(std::vector<double>& out_encodedDoubleArray);
		//-------------------------------------------------------------------------------------------------------------

		//-------------------------------------------------------------------------------------------------------------
		//! @name Getters for Visualisation Images
		//!@{

		//! Populate the passed in cv::Mats with the latest annotated/processed depth and AB images
		//! 
		//! @param abImage8bit		An 8-bit cv::Mat (512x512) 
		//! @param depthImage8bit	An 8-bit cv::Mat (512x512) 
		void RetrieveDisplayImages(cv::Mat& abImage8bit, cv::Mat& depthImage8bit);
		
		//! Populate the passed in cv::Mats with the latest annotated/processed depth and AB images
		//!  
		//! @param abImage8bit		Raw pointer to 8-bit buffer to store AB image into 
		//! @param depthImage8bit	Raw pointer to 8-bit buffer to store depth image into 
		//! @param img_BufLen		Length of \p abImage8bit and \p depthImage8bit buffers 
		void RetrieveDisplayImages(uint8_t* abImage8bit, uint8_t* depthImage8bit, size_t img_BufLen);
		//!@}
		//-------------------------------------------------------------------------------------------------------------
	
	private:
		
		//! Main member variable holding data about tool visibility and pose
		std::map<uint8_t, IRTrackerUtils::TrackedTool> m_ToolDictionary;
		
		//! @name Cache cv::Mat
		//!@{
		cv::Mat m_ABImg16bit, m_ABImg8bit, m_DepthImg16bit, m_DepthDisplayImg8bit, m_ABDisplayImg8bit;
		//!@}
				
		//! @name Cache Vectors
		//!@{
		//! Used to cache data related to detected blobs in each frame
		std::vector<cv::Point2f> m_cache_frameBlobPixelLocations;
		std::vector<IRTrackerUtils::InfraBlobInfo> m_cache_frameBlobInfo;
		//!@}

		//! An std::function pointer which should mimic function signature of ResearchModeAPI's MapImageToUnitPlane
		IRTrackerUtils::UnmapFunction m_MapImageToUnitPlane = nullptr;
};	

#endif // !HOLO2_IR_TRACKER_H