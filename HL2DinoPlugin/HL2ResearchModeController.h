/** @file		HL2ResearchModeController.h
 *  @brief		Function prototypes for the HL2ResearchMode class
 *
 *  Structure for how to interact with ResearchModeAPI adapted from petergu684's
 *  HoloLens2-ReserchMode-Unity project on GitHub. This class is intended to grab images
 *  from depth AHAT sensor of the HL2 for passing into the member \ref Holo2IRTracker member.
 *  This also exposes public methods for accessing native data types on the Unity side
 *  such as sensor image buffers and tool matrices (encoded into a double array).
 *
 *  @note       This file and its .cpp were autogenerated based on the .idl
 *              hence the struct based implementations and definitions.
 *
 *  @author		Hisham Iqbal
 *  @copyright	&copy; 2023 Hisham Iqbal
 */

#ifndef HL2_RESEARCHMODECONTROLLER_H
#define HL2_RESEARCHMODECONTROLLER_H

#include "HL2ResearchModeController.g.h"
#include "Holo2IRTracker.h"
#include "ResearchModeApi.h"
#include <winrt/Windows.Perception.Spatial.h>
#include <winrt/Windows.Perception.Spatial.Preview.h>
#include <mutex>

namespace winrt::HL2DinoPlugin::implementation
{
    struct HL2ResearchModeController : HL2ResearchModeControllerT<HL2ResearchModeController>
    {
        //----------------------------------------------------------------------------------------------------------  
        //! @name   Constructors
        ///@{
        //! Default constructor which sets up sensor consent and other members
        HL2ResearchModeController();
        //! Constructor which initialises a \ref Holo2IRTracker based on formatted tool config string
        HL2ResearchModeController(hstring const& toolConfigString, bool isJsonFormattedString);
        ///@}
        //----------------------------------------------------------------------------------------------------------
        
         //----------------------------------------------------------------------------------------------------------
        //! @name   Depth Sensor Controllers
        ///@{

        //! Pre-assigns some member variables to set-up depth sensor, but doesn't start the sensor 
        void InitialiseDepthSensor();

        //! Opens the sensor stream, and starts processing infrared data captured by the AHAT sensor
        void StartDepthSensorLoop();

        //! Tries to gracefully shut everything down for a happy exit
        void StopSensorLoop();

        //! Toggle ability to send images for display on Unity side
        /*! Pass in a bool to set whether the HL2 should actually process the sensor images so they can be
         *  displayed on the consumer/Unity side. If false, no extra operations done to copy/init display
         *  textures, so we can potentially run a little faster.
         */
        void ToggleDisplaySensorImages(bool showTextures);
        ///@}
        //----------------------------------------------------------------------------------------------------------

        //----------------------------------------------------------------------------------------------------------
        //! @name   Other Initialisation Routines
        ///@{

        //! Pass in the coordinate frame from Unity which is used in the app to define a world frame
        void SetReferenceCoordinateSystem(winrt::Windows::Perception
            ::Spatial::SpatialCoordinateSystem const& coordinateFrame);

        //! Pass in an encoded string (comma and semi-colon delimited) string to describe tools to be tracked
        /*!
        * @param toolListString     String encoded as follows: semi-colons separate tools, and commas separate tool
        *                           coordinates. \n[toolID(0-255),x0,y0,z0,x1,y1,z1,x2,y2,z2,..., repeats for n tools]
        */
        void SetToolListByString(hstring const& toolListString);
        ///@}
        //----------------------------------------------------------------------------------------------------------

        //----------------------------------------------------------------------------------------------------------
        //! @name   Public Boolean Getters
        //!         Getters for private booleans allowing the Unity side to be notified of state changes
        ///@{    

        //! Public flag set true each time a set of depth camera frames are processed to search for IR-reflective tools
        bool ToolDictionaryUpdated();

        //! Public flag set true each time a new raw depth frame (16-bit) is captured 
        bool RawDepthImageUpdated();

        //! Public flag set true each time a new raw AB image frame (16-bit) is captured 
        bool RawABImageUpdated();

        //! Public flag set true when an 8-bit processed image of the depth frame is refreshed 
        bool Depth8BitImageUpdated();

        //! Public flag set true when an 8-bit processed image of the AB/infrared response frame is refreshed 
        bool AB8BitImageUpdated();
        ///@}
        //----------------------------------------------------------------------------------------------------------

        //----------------------------------------------------------------------------------------------------------
        //! @name   Buffer Grabbing Functions
        //! @brief  Externally accessible functions for grabbing array style data (images, tool-pose matrices,
        //!         etc.)
        ///@{

        //! An encoded double array describing if the tools passed into \ref HL2ResearchMode constructor
        //! are visible to the HL2, and 16 doubles describing the 4x4 pose matrix (column-major)
        com_array<double> GetTrackedToolsPoseMatrices();

        //! 16-bit raw buffer of the depth values obtained from the AHAT sensor
        com_array<uint16_t> GetRawDepthImageBuffer();

        //! 16-bit raw buffer of the active brightness / infrared response from the AHAT sensor
        com_array<uint16_t> GetRawABImageBuffer();

        //! 8-bit processed depth image buffer (thresholds values above 4090) with values linearly mapped to (0-255)
        com_array<uint8_t> Get8BitDepthImageBuf();

        //! 8-bit processed AB image buffer (brightened by a set scale factor of 64) linearly mapped to (0-255)
        com_array<uint8_t> Get8BitABImageBuf();
        ///@}
        //----------------------------------------------------------------------------------------------------------

        //! @brief      Returns info gathered the Shiny profiler API, as decorated across the plugin
        //! @return 
        hstring GetProfilerString();

        ~HL2ResearchModeController();

         private:
             //! \brief Member variable which will take in raw sensor data and HL2 info as input
             //! and return encoded information about tool pose matrices.
             Holo2IRTracker m_IRTracker;

             //! Should be set to length of depth AHAT image buffers (expecting 512 x 512 values for
             //! both the depth and AB image buffers). Note this is NOT the number of bytes in the buffer
             std::atomic_int m_depthBufferSize = 0;

             //! \brief Encoded double array of tool pose matrices
             //! Encoded double array which is updated once a frame to reflect which tools are visible
             //! to the HL2
             std::vector <double> m_OutputToolPoseVector;

             //! Static implementation of the depth sensor loop function
             /*! @param pHL2ResearchMode Pass in the active instance of the @ref HL2ResearchMode class */
             static void DepthSensorLoop(HL2ResearchModeController* pHL2ResearchMode);

             //! Class member pointer for handling thread implementation
             std::thread* m_pDepthUpdateThread = nullptr;

             //----------------------------------------------------------------------------------------------------------
             //! @name   Class mutexes
             //!         Use to manage thread-safe access for variables being written to in \ref DepthSensorLoop
             //!         which may be accessed externally from Unity.
             ///@{
             std::mutex m_imgMutex;
             std::mutex m_toggleImgMutex;
             std::mutex m_toolDoubleVectorMutex;
             ///@}
             //----------------------------------------------------------------------------------------------------------

             //----------------------------------------------------------------------------------------------------------
             //! @name Raw 16-bit sensor image pointers 
             //!       Obtained from ResearchModeAPI.h, can be copied for offline analysis later on Unity side
             ///@{
             UINT16* m_RawDepthImgBuf = nullptr;
             UINT16* m_RawABImgBuf = nullptr;
             ///@}
             //----------------------------------------------------------------------------------------------------------

             //----------------------------------------------------------------------------------------------------------
             //! @name 8-bit image pointers for display textures
             //!       Processed sensor images for displaying in Unity. AB Image buffer has been brightened and
             //!       annotated with marker locations. Depth image has been processed to remove 'wrap-around' 
             //!       raw depth values above 4090 (set to 0). Used for pure display purposes, actual numeric
             //!       values aren't strictly of significance.
             ///@{
             UINT8* m_8bitDepthImgBuf = nullptr;
             UINT8* m_8BitABImgBuf = nullptr;
             ///@}
             //----------------------------------------------------------------------------------------------------------

             //----------------------------------------------------------------------------------------------------------
             //! @name ResearchModeAPI Pointers
             //! Pointers used to access interfaces for the depth/AHAT sensor and general
             //! sensor access across the ResearchModeAPI
             ///@{  

             IResearchModeSensor* m_depthSensor = nullptr;
             IResearchModeCameraSensor* m_pDepthCameraSensor = nullptr;
             IResearchModeSensorDevice* m_pSensorDevice = nullptr;
             std::vector<ResearchModeSensorDescriptor> m_sensorDescriptors;
             ResearchModeSensorResolution m_depthResolution;
             ///@}
             //----------------------------------------------------------------------------------------------------------

             //----------------------------------------------------------------------------------------------------------
             //! @name Depth AHAT Camera Extrinsic Parameters
             ///@{
             DirectX::XMFLOAT4X4 m_depthCamExtrinsic; //!< DX Matrix converting from rig (LF) to depth coordinates
             DirectX::XMMATRIX m_depthCamExtrinsicInverse; //!< DX Matrix converting from depth to rig (LF) coordinates
             ///@}
             //----------------------------------------------------------------------------------------------------------

             //----------------------------------------------------------------------------------------------------------
             //! @name Sensor Consent Members
             //!@{

             //! Sensor consent members used when initialising depth sensor loop/acess
             IResearchModeSensorDeviceConsent* m_pSensorDeviceConsent = nullptr;
             static void CamAccessOnComplete(ResearchModeSensorConsent consent);
             //!@}
             //----------------------------------------------------------------------------------------------------------

             //----------------------------------------------------------------------------------------------------------
             //! @name Spatial API Parameters
             //!@{

             //! Spatial location member vars used to set the world frame of the HL2
             //! which can be externally set to sync up with Unity's own world frame
             Windows::Perception::Spatial::SpatialLocator m_locator = 0;
             Windows::Perception::Spatial::SpatialCoordinateSystem m_refFrame = nullptr;
             //!@}
             //----------------------------------------------------------------------------------------------------------

             //----------------------------------------------------------------------------------------------------------
             //! @name Member State Booleans
             //!@{
             //! Member bools which are used to internally sync/track updates between external access and internal 
             //! depth sensor loop
             std::atomic_bool m_RawDepthImageUpdated = false;
             std::atomic_bool m_Depth8BitImageUpdated = false;

             std::atomic_bool m_RawABImageUpdated = false;
             std::atomic_bool m_AB8BitImageUpdated = false;

             std::atomic_bool m_toolDictUpdated = false;
             std::atomic_bool m_stashSensorImgs = true;
             std::atomic_bool m_depthSensorLoopStarted = false;
             //!@}
             //----------------------------------------------------------------------------------------------------------

             //! Util function for DirectX matrix string printing 
             std::string MatrixToString(DirectX::XMFLOAT4X4 mat);
    };
}
namespace winrt::HL2DinoPlugin::factory_implementation
{
    struct HL2ResearchModeController : HL2ResearchModeControllerT<HL2ResearchModeController, implementation::HL2ResearchModeController>
    {
    };
}
#endif // HL2RESEARCHMODECONTROLLER_H